{"ast":null,"code":"// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n// Map over the initial data and add a 'color' key with a random color\nconst modifiedData = initialData.map(item => ({\n  ...item,\n  color: getRandomColor()\n}));\n\n// Log the modified data\nconsole.log(modifiedData);\nexport const xdata = jsonData;","map":{"version":3,"names":["jsonData","getRandomColor","letters","color","i","Math","floor","random","modifiedData","initialData","map","item","console","log","xdata"],"sources":["/Users/sreekavyakashamshetty/Downloads/my-app/src/Data.js"],"sourcesContent":["\n\n// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\n\n\nconst getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  \n  // Map over the initial data and add a 'color' key with a random color\n  const modifiedData = initialData.map((item) => ({\n    ...item,\n    color: getRandomColor(),\n  }));\n  \n  // Log the modified data\n  console.log(modifiedData);\n  export const xdata = jsonData"],"mappings":"AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,QAAQ,MAAM,gBAAgB;AAGrC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMC,OAAO,GAAG,kBAAkB;EAClC,IAAIC,KAAK,GAAG,GAAG;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAClD;EACA,OAAOJ,KAAK;AACd,CAAC;;AAED;AACA,MAAMK,YAAY,GAAGC,WAAW,CAACC,GAAG,CAAEC,IAAI,KAAM;EAC9C,GAAGA,IAAI;EACPR,KAAK,EAAEF,cAAc,CAAC;AACxB,CAAC,CAAC,CAAC;;AAEH;AACAW,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;AACzB,OAAO,MAAMM,KAAK,GAAGd,QAAQ"},"metadata":{},"sourceType":"module"}