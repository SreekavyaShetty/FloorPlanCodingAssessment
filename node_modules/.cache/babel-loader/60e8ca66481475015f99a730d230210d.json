{"ast":null,"code":"// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n// Map over the initial data and add a 'color' key with a random color\nconst modifiedData = jsonData.map(item => ({\n  ...item,\n  color: getRandomColor()\n}));\n\n// Log the modified data\n//   console.log(modifiedData);\n\n//   export const xdata = modifiedData\n\nconst processData = () => {\n  const processedData = [];\n  modifiedData.forEach(item => {\n    const repeatTimes = item.repeat || 1;\n    for (let i = 0; i < repeatTimes; i++) {\n      processedData.push({\n        ...item\n      }); // Use spread operator to clone the object\n    }\n  });\n  return processedData;\n};\n\n//   console.log(processData);\n//   export const xdata = processData();\n\nconst rdata = processData();\n// rearrangeData.js\n\n// rearrangeData.js\nconst rearrangeData = rdata => {\n  // Count the occurrences of each product\n  const productCounts = rdata.reduce((acc, item) => {\n    acc[item.product] = (acc[item.product] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Sort products by their count (ascending)\n  const sortedProducts = Object.entries(productCounts).sort((a, b) => a[1] - b[1]);\n\n  // Create a queue for each product\n  const productQueues = sortedProducts.reduce((acc, [product]) => {\n    acc[product] = rdata.filter(item => item.product === product);\n    return acc;\n  }, {});\n  let rearranged = [];\n  let lastProduct = null;\n  while (rearranged.length < data.length) {\n    for (const [product, queue] of Object.entries(productQueues)) {\n      if (queue.length > 0 && product !== lastProduct) {\n        rearranged.push(queue.shift());\n        lastProduct = product;\n        break;\n      }\n    }\n  }\n  return rearranged;\n};\nexport default rearrangeData;\nexport const xdata = rearrangeData();","map":{"version":3,"names":["jsonData","getRandomColor","letters","color","i","Math","floor","random","modifiedData","map","item","processData","processedData","forEach","repeatTimes","repeat","push","rdata","rearrangeData","productCounts","reduce","acc","product","sortedProducts","Object","entries","sort","a","b","productQueues","filter","rearranged","lastProduct","length","data","queue","shift","xdata"],"sources":["/Users/sreekavyakashamshetty/Downloads/my-app/src/Data.js"],"sourcesContent":["\n\n// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\n\n\nconst getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  \n  // Map over the initial data and add a 'color' key with a random color\n  const modifiedData = jsonData.map((item) => ({\n    ...item,\n    color: getRandomColor(),\n  }));\n  \n  // Log the modified data\n//   console.log(modifiedData);\n\n//   export const xdata = modifiedData\n\n  const processData = () => {\n    const processedData = [];\n  \n    modifiedData.forEach(item => {\n      const repeatTimes = item.repeat || 1;\n      for (let i = 0; i < repeatTimes; i++) {\n        processedData.push({ ...item }); // Use spread operator to clone the object\n      }\n    });\n    return processedData;\n  };\n  \n\n\n\n//   console.log(processData);\n//   export const xdata = processData();\n\nconst rdata = processData();\n  // rearrangeData.js\n\n// rearrangeData.js\nconst rearrangeData = (rdata) => {\n    // Count the occurrences of each product\n    const productCounts = rdata.reduce((acc, item) => {\n      acc[item.product] = (acc[item.product] || 0) + 1;\n      return acc;\n    }, {});\n  \n    // Sort products by their count (ascending)\n    const sortedProducts = Object.entries(productCounts).sort((a, b) => a[1] - b[1]);\n  \n    // Create a queue for each product\n    const productQueues = sortedProducts.reduce((acc, [product]) => {\n      acc[product] = rdata.filter(item => item.product === product);\n      return acc;\n    }, {});\n  \n    let rearranged = [];\n    let lastProduct = null;\n  \n    while (rearranged.length < data.length) {\n      for (const [product, queue] of Object.entries(productQueues)) {\n        if (queue.length > 0 && product !== lastProduct) {\n          rearranged.push(queue.shift());\n          lastProduct = product;\n          break;\n        }\n      }\n    }\n  \n    return rearranged;\n  };\n  \n  export default rearrangeData;\n  \n  \n  export const xdata = rearrangeData();\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}