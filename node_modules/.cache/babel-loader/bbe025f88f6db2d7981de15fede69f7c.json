{"ast":null,"code":"// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n// Map over the initial data and add a 'color' key with a random color\nconst modifiedData = jsonData.map(item => ({\n  ...item,\n  color: getRandomColor()\n}));\n\n// Log the modified data\n//   console.log(modifiedData);\n\n//   export const xdata = modifiedData\n\nconst processData = () => {\n  const processedData = [];\n  modifiedData.forEach(item => {\n    const repeatTimes = item.repeat || 1;\n    for (let i = 0; i < repeatTimes; i++) {\n      processedData.push({\n        ...item\n      }); // Use spread operator to clone the object\n    }\n  });\n  return processedData;\n};\n\n//   console.log(processData);\n//   export const xdata = processData();\n\nconst rdata = processData();\n// rearrangeData.js\n\nconsole.log(rdata.length);\nconst rearrangeData = rdata => {\n  let rearranged = [];\n  let lastItem = {};\n  console.log(rdata.length);\n\n  // Helper function to find and remove the next suitable item\n  const findNextItem = (items, lastItemName) => {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].product !== lastItemName) {\n        return items.splice(i, 1)[0]; // Remove and return the item\n      }\n      console.log(rdata);\n      console.log(rdata.length);\n    }\n    return null;\n  };\n  while (rdata.length > 0) {\n    const nextItem = findNextItem(rdata, lastItem.product);\n    if (nextItem) {\n      rearranged.push(nextItem);\n      lastItem = nextItem;\n    } else {\n      // If no suitable item is found, reset the lastItem and try again\n      lastItem = {};\n    }\n  }\n  return rearranged;\n};\nexport const xdata = rearrangeData();","map":{"version":3,"names":["jsonData","getRandomColor","letters","color","i","Math","floor","random","modifiedData","map","item","processData","processedData","forEach","repeatTimes","repeat","push","rdata","console","log","length","rearrangeData","rearranged","lastItem","findNextItem","items","lastItemName","product","splice","nextItem","xdata"],"sources":["/Users/sreekavyakashamshetty/Downloads/my-app/src/Data.js"],"sourcesContent":["\n\n// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\n\n\nconst getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  \n  // Map over the initial data and add a 'color' key with a random color\n  const modifiedData = jsonData.map((item) => ({\n    ...item,\n    color: getRandomColor(),\n  }));\n  \n  // Log the modified data\n//   console.log(modifiedData);\n\n//   export const xdata = modifiedData\n\n  const processData = () => {\n    const processedData = [];\n  \n    modifiedData.forEach(item => {\n      const repeatTimes = item.repeat || 1;\n      for (let i = 0; i < repeatTimes; i++) {\n        processedData.push({ ...item }); // Use spread operator to clone the object\n      }\n    });\n    return processedData;\n  };\n  \n\n\n\n//   console.log(processData);\n//   export const xdata = processData();\n\nconst rdata = processData();\n  // rearrangeData.js\n\nconsole.log(rdata.length);\n\nconst rearrangeData = (rdata) => {\n    let rearranged = [];\n    let lastItem = {};\n    console.log(rdata.length);\n\n  \n    // Helper function to find and remove the next suitable item\n    const findNextItem = (items, lastItemName) => {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].product !== lastItemName) {\n          return items.splice(i, 1)[0]; // Remove and return the item\n        }\n        console.log(rdata);\n        console.log(rdata.length);\n      }\n      return null;\n    };\n  \n    while (rdata.length > 0) {\n      const nextItem = findNextItem(rdata, lastItem.product);\n      if (nextItem) {\n        rearranged.push(nextItem);\n        lastItem = nextItem;\n      } else {\n        // If no suitable item is found, reset the lastItem and try again\n        lastItem = {};\n      }\n    }\n  \n    return rearranged;\n  };\n  \n  export const xdata = rearrangeData();\n  "],"mappings":"AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,QAAQ,MAAM,gBAAgB;AAGrC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMC,OAAO,GAAG,kBAAkB;EAClC,IAAIC,KAAK,GAAG,GAAG;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAClD;EACA,OAAOJ,KAAK;AACd,CAAC;;AAED;AACA,MAAMK,YAAY,GAAGR,QAAQ,CAACS,GAAG,CAAEC,IAAI,KAAM;EAC3C,GAAGA,IAAI;EACPP,KAAK,EAAEF,cAAc,CAAC;AACxB,CAAC,CAAC,CAAC;;AAEH;AACF;;AAEA;;AAEE,MAAMU,WAAW,GAAGA,CAAA,KAAM;EACxB,MAAMC,aAAa,GAAG,EAAE;EAExBJ,YAAY,CAACK,OAAO,CAACH,IAAI,IAAI;IAC3B,MAAMI,WAAW,GAAGJ,IAAI,CAACK,MAAM,IAAI,CAAC;IACpC,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,WAAW,EAAEV,CAAC,EAAE,EAAE;MACpCQ,aAAa,CAACI,IAAI,CAAC;QAAE,GAAGN;MAAK,CAAC,CAAC,CAAC,CAAC;IACnC;EACF,CAAC,CAAC;EACF,OAAOE,aAAa;AACtB,CAAC;;AAKH;AACA;;AAEA,MAAMK,KAAK,GAAGN,WAAW,CAAC,CAAC;AACzB;;AAEFO,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,MAAM,CAAC;AAEzB,MAAMC,aAAa,GAAIJ,KAAK,IAAK;EAC7B,IAAIK,UAAU,GAAG,EAAE;EACnB,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjBL,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,MAAM,CAAC;;EAGzB;EACA,MAAMI,YAAY,GAAGA,CAACC,KAAK,EAAEC,YAAY,KAAK;IAC5C,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,KAAK,CAACL,MAAM,EAAEhB,CAAC,EAAE,EAAE;MACrC,IAAIqB,KAAK,CAACrB,CAAC,CAAC,CAACuB,OAAO,KAAKD,YAAY,EAAE;QACrC,OAAOD,KAAK,CAACG,MAAM,CAACxB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChC;MACAc,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,MAAM,CAAC;IAC3B;IACA,OAAO,IAAI;EACb,CAAC;EAED,OAAOH,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMS,QAAQ,GAAGL,YAAY,CAACP,KAAK,EAAEM,QAAQ,CAACI,OAAO,CAAC;IACtD,IAAIE,QAAQ,EAAE;MACZP,UAAU,CAACN,IAAI,CAACa,QAAQ,CAAC;MACzBN,QAAQ,GAAGM,QAAQ;IACrB,CAAC,MAAM;MACL;MACAN,QAAQ,GAAG,CAAC,CAAC;IACf;EACF;EAEA,OAAOD,UAAU;AACnB,CAAC;AAED,OAAO,MAAMQ,KAAK,GAAGT,aAAa,CAAC,CAAC"},"metadata":{},"sourceType":"module"}