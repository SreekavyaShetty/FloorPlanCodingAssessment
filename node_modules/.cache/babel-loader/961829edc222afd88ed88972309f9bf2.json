{"ast":null,"code":"// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let rcolor = '#';\n  for (let i = 0; i < 6; i++) {\n    rcolor += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n// Map over the initial data and add a 'color' key with a random color\nconst modifiedData = jsonData.map(item => ({\n  ...item,\n  rcolor: getRandomColor()\n}));\n\n// Log the modified data\n//   console.log(modifiedData);\n\n//   export const xdata = modifiedData\n\nconst processData = () => {\n  const processedData = [];\n  modifiedData.forEach(item => {\n    const repeatTimes = item.repeat || 1;\n    for (let i = 0; i < repeatTimes; i++) {\n      processedData.push({\n        ...item\n      }); // Use spread operator to clone the object\n    }\n  });\n  return processedData;\n};\nconsole.log(processData());\n//  export const xdata = processData();\n\nexport default processData;\n\n// export const rdata = processData();\n// rearrangeData.js\n\n// rearrangeData.js","map":{"version":3,"names":["jsonData","getRandomColor","letters","rcolor","i","Math","floor","random","color","modifiedData","map","item","processData","processedData","forEach","repeatTimes","repeat","push","console","log"],"sources":["/Users/sreekavyakashamshetty/Downloads/my-app/src/Data.js"],"sourcesContent":["\n\n// // ProcessedData.js\n// import jsonData from './dataset.json'; // Adjust the path to your JSON file\n// import randomColor from 'randomcolor';\n\n// const processData = () => {\n//   const uniqueProducts = new Set(jsonData.map(item => item.product));\n//   const colorMap = {};\n\n//   uniqueProducts.forEach(product => {\n//     colorMap[product] = randomColor();\n//   });\n\n//   return jsonData.map(item => ({\n//     ...item,\n//     color: colorMap[item.product]\n//   }));\n// };\n\n// export default processData;\n\n// ProcessedData.js\n// import randomColor from 'randomcolor';\n\n// const fetchData = async () => {\n//   try {\n//     const response = await fetch('/dataset.json');\n//     if (!response.ok) {\n//       throw new Error('Network response was not ok');\n//     }\n//     const jsonData = await response.json();\n\n//     const uniqueProducts = new Set(jsonData.map(item => item.product));\n//     const colorMap = {};\n\n//     uniqueProducts.forEach(product => {\n//       colorMap[product] = randomColor();\n//     });\n\n//     return jsonData.map(item => ({\n//       ...item,\n//       color: colorMap[item.product]\n//     }));\n//   } catch (error) {\n//     console.error('Error fetching data:', error);\n//     return [];\n//   }\n// };\n\nimport jsonData from './dataset.json';\n\n\nconst getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let rcolor = '#';\n    for (let i = 0; i < 6; i++) {\n      rcolor += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  \n  // Map over the initial data and add a 'color' key with a random color\n  const modifiedData = jsonData.map((item) => ({\n    ...item,\n    rcolor: getRandomColor(),\n  }));\n  \n  // Log the modified data\n//   console.log(modifiedData);\n\n//   export const xdata = modifiedData\n\n  const processData = () => {\n    const processedData = [];\n  \n    modifiedData.forEach(item => {\n      const repeatTimes = item.repeat || 1;\n      for (let i = 0; i < repeatTimes; i++) {\n        processedData.push({ ...item }); // Use spread operator to clone the object\n      }\n    });\n    return processedData;\n  };\n  \n\n\n\n   console.log(processData());\n //  export const xdata = processData();\n\nexport default processData;\n\n// export const rdata = processData();\n  // rearrangeData.js\n\n// rearrangeData.js\n\n  "],"mappings":"AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,QAAQ,MAAM,gBAAgB;AAGrC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMC,OAAO,GAAG,kBAAkB;EAClC,IAAIC,MAAM,GAAG,GAAG;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,MAAM,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EACnD;EACA,OAAOC,KAAK;AACd,CAAC;;AAED;AACA,MAAMC,YAAY,GAAGT,QAAQ,CAACU,GAAG,CAAEC,IAAI,KAAM;EAC3C,GAAGA,IAAI;EACPR,MAAM,EAAEF,cAAc,CAAC;AACzB,CAAC,CAAC,CAAC;;AAEH;AACF;;AAEA;;AAEE,MAAMW,WAAW,GAAGA,CAAA,KAAM;EACxB,MAAMC,aAAa,GAAG,EAAE;EAExBJ,YAAY,CAACK,OAAO,CAACH,IAAI,IAAI;IAC3B,MAAMI,WAAW,GAAGJ,IAAI,CAACK,MAAM,IAAI,CAAC;IACpC,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,WAAW,EAAEX,CAAC,EAAE,EAAE;MACpCS,aAAa,CAACI,IAAI,CAAC;QAAE,GAAGN;MAAK,CAAC,CAAC,CAAC,CAAC;IACnC;EACF,CAAC,CAAC;EACF,OAAOE,aAAa;AACtB,CAAC;AAKAK,OAAO,CAACC,GAAG,CAACP,WAAW,CAAC,CAAC,CAAC;AAC5B;;AAED,eAAeA,WAAW;;AAE1B;AACE;;AAEF"},"metadata":{},"sourceType":"module"}